//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// Microsoft.VSDesigner generó automáticamente este código fuente, versión=4.0.30319.42000.
// 
#pragma warning disable 1591

namespace WebLogic.localhost {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WebService1Soap", Namespace="http://tempuri.org/")]
    public partial class WebService1 : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback LoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback ClientExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIdClientExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddClientOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddRoomOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveClientbyIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveLoginbyIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReservationExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddReservationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllClientsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLoginByClientIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLoginByReceptionistIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetClientByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRoomByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReservationByClientIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReservationByReceptionistIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetClientByReceptionistIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRecepcionistByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllReservationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllReceptionistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllRoomOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllAvailableRoomOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllNonAvailableRoomOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateClientOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateReceptionistOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangePasswordLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangePasswordClientOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangePasswordReceptionistOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeAvailableRoomOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WebService1() {
            this.Url = global::WebLogic.Properties.Settings.Default.WebLogic_localhost_WebService1;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event LoginCompletedEventHandler LoginCompleted;
        
        /// <remarks/>
        public event ClientExistsCompletedEventHandler ClientExistsCompleted;
        
        /// <remarks/>
        public event GetIdClientExistsCompletedEventHandler GetIdClientExistsCompleted;
        
        /// <remarks/>
        public event AddClientCompletedEventHandler AddClientCompleted;
        
        /// <remarks/>
        public event AddRoomCompletedEventHandler AddRoomCompleted;
        
        /// <remarks/>
        public event RemoveClientbyIdCompletedEventHandler RemoveClientbyIdCompleted;
        
        /// <remarks/>
        public event RemoveLoginbyIdCompletedEventHandler RemoveLoginbyIdCompleted;
        
        /// <remarks/>
        public event AddLoginCompletedEventHandler AddLoginCompleted;
        
        /// <remarks/>
        public event ReservationExistsCompletedEventHandler ReservationExistsCompleted;
        
        /// <remarks/>
        public event AddReservationCompletedEventHandler AddReservationCompleted;
        
        /// <remarks/>
        public event GetAllClientsCompletedEventHandler GetAllClientsCompleted;
        
        /// <remarks/>
        public event GetLoginByClientIdCompletedEventHandler GetLoginByClientIdCompleted;
        
        /// <remarks/>
        public event GetLoginByReceptionistIdCompletedEventHandler GetLoginByReceptionistIdCompleted;
        
        /// <remarks/>
        public event GetClientByIdCompletedEventHandler GetClientByIdCompleted;
        
        /// <remarks/>
        public event GetRoomByIdCompletedEventHandler GetRoomByIdCompleted;
        
        /// <remarks/>
        public event GetReservationByClientIdCompletedEventHandler GetReservationByClientIdCompleted;
        
        /// <remarks/>
        public event GetReservationByReceptionistIdCompletedEventHandler GetReservationByReceptionistIdCompleted;
        
        /// <remarks/>
        public event GetClientByReceptionistIdCompletedEventHandler GetClientByReceptionistIdCompleted;
        
        /// <remarks/>
        public event GetRecepcionistByIdCompletedEventHandler GetRecepcionistByIdCompleted;
        
        /// <remarks/>
        public event GetAllReservationsCompletedEventHandler GetAllReservationsCompleted;
        
        /// <remarks/>
        public event GetAllReceptionistsCompletedEventHandler GetAllReceptionistsCompleted;
        
        /// <remarks/>
        public event GetAllRoomCompletedEventHandler GetAllRoomCompleted;
        
        /// <remarks/>
        public event GetAllAvailableRoomCompletedEventHandler GetAllAvailableRoomCompleted;
        
        /// <remarks/>
        public event GetAllNonAvailableRoomCompletedEventHandler GetAllNonAvailableRoomCompleted;
        
        /// <remarks/>
        public event UpdateClientCompletedEventHandler UpdateClientCompleted;
        
        /// <remarks/>
        public event UpdateReceptionistCompletedEventHandler UpdateReceptionistCompleted;
        
        /// <remarks/>
        public event UpdateLoginCompletedEventHandler UpdateLoginCompleted;
        
        /// <remarks/>
        public event ChangePasswordLoginCompletedEventHandler ChangePasswordLoginCompleted;
        
        /// <remarks/>
        public event ChangePasswordClientCompletedEventHandler ChangePasswordClientCompleted;
        
        /// <remarks/>
        public event ChangePasswordReceptionistCompletedEventHandler ChangePasswordReceptionistCompleted;
        
        /// <remarks/>
        public event ChangeAvailableRoomCompletedEventHandler ChangeAvailableRoomCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Login", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable Login(string user, string pass) {
            object[] results = this.Invoke("Login", new object[] {
                        user,
                        pass});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void LoginAsync(string user, string pass) {
            this.LoginAsync(user, pass, null);
        }
        
        /// <remarks/>
        public void LoginAsync(string user, string pass, object userState) {
            if ((this.LoginOperationCompleted == null)) {
                this.LoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginOperationCompleted);
            }
            this.InvokeAsync("Login", new object[] {
                        user,
                        pass}, this.LoginOperationCompleted, userState);
        }
        
        private void OnLoginOperationCompleted(object arg) {
            if ((this.LoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginCompleted(this, new LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ClientExists", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ClientExists(string name, string lastname, int cardnumber, int phone, string email, string password, int Rid) {
            object[] results = this.Invoke("ClientExists", new object[] {
                        name,
                        lastname,
                        cardnumber,
                        phone,
                        email,
                        password,
                        Rid});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ClientExistsAsync(string name, string lastname, int cardnumber, int phone, string email, string password, int Rid) {
            this.ClientExistsAsync(name, lastname, cardnumber, phone, email, password, Rid, null);
        }
        
        /// <remarks/>
        public void ClientExistsAsync(string name, string lastname, int cardnumber, int phone, string email, string password, int Rid, object userState) {
            if ((this.ClientExistsOperationCompleted == null)) {
                this.ClientExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnClientExistsOperationCompleted);
            }
            this.InvokeAsync("ClientExists", new object[] {
                        name,
                        lastname,
                        cardnumber,
                        phone,
                        email,
                        password,
                        Rid}, this.ClientExistsOperationCompleted, userState);
        }
        
        private void OnClientExistsOperationCompleted(object arg) {
            if ((this.ClientExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ClientExistsCompleted(this, new ClientExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetIdClientExists", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetIdClientExists(string name, string lastname, int cardnumber, int phone, string password, int Rid) {
            object[] results = this.Invoke("GetIdClientExists", new object[] {
                        name,
                        lastname,
                        cardnumber,
                        phone,
                        password,
                        Rid});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetIdClientExistsAsync(string name, string lastname, int cardnumber, int phone, string password, int Rid) {
            this.GetIdClientExistsAsync(name, lastname, cardnumber, phone, password, Rid, null);
        }
        
        /// <remarks/>
        public void GetIdClientExistsAsync(string name, string lastname, int cardnumber, int phone, string password, int Rid, object userState) {
            if ((this.GetIdClientExistsOperationCompleted == null)) {
                this.GetIdClientExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIdClientExistsOperationCompleted);
            }
            this.InvokeAsync("GetIdClientExists", new object[] {
                        name,
                        lastname,
                        cardnumber,
                        phone,
                        password,
                        Rid}, this.GetIdClientExistsOperationCompleted, userState);
        }
        
        private void OnGetIdClientExistsOperationCompleted(object arg) {
            if ((this.GetIdClientExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIdClientExistsCompleted(this, new GetIdClientExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddClient", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddClient(string name, string lastname, int cardnumber, int phone, string password, int Rid, string email) {
            this.Invoke("AddClient", new object[] {
                        name,
                        lastname,
                        cardnumber,
                        phone,
                        password,
                        Rid,
                        email});
        }
        
        /// <remarks/>
        public void AddClientAsync(string name, string lastname, int cardnumber, int phone, string password, int Rid, string email) {
            this.AddClientAsync(name, lastname, cardnumber, phone, password, Rid, email, null);
        }
        
        /// <remarks/>
        public void AddClientAsync(string name, string lastname, int cardnumber, int phone, string password, int Rid, string email, object userState) {
            if ((this.AddClientOperationCompleted == null)) {
                this.AddClientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddClientOperationCompleted);
            }
            this.InvokeAsync("AddClient", new object[] {
                        name,
                        lastname,
                        cardnumber,
                        phone,
                        password,
                        Rid,
                        email}, this.AddClientOperationCompleted, userState);
        }
        
        private void OnAddClientOperationCompleted(object arg) {
            if ((this.AddClientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddClientCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddRoom", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddRoom(int number, string typeRoom, string Name, int spaces) {
            this.Invoke("AddRoom", new object[] {
                        number,
                        typeRoom,
                        Name,
                        spaces});
        }
        
        /// <remarks/>
        public void AddRoomAsync(int number, string typeRoom, string Name, int spaces) {
            this.AddRoomAsync(number, typeRoom, Name, spaces, null);
        }
        
        /// <remarks/>
        public void AddRoomAsync(int number, string typeRoom, string Name, int spaces, object userState) {
            if ((this.AddRoomOperationCompleted == null)) {
                this.AddRoomOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddRoomOperationCompleted);
            }
            this.InvokeAsync("AddRoom", new object[] {
                        number,
                        typeRoom,
                        Name,
                        spaces}, this.AddRoomOperationCompleted, userState);
        }
        
        private void OnAddRoomOperationCompleted(object arg) {
            if ((this.AddRoomCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddRoomCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RemoveClientbyId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveClientbyId(int id) {
            this.Invoke("RemoveClientbyId", new object[] {
                        id});
        }
        
        /// <remarks/>
        public void RemoveClientbyIdAsync(int id) {
            this.RemoveClientbyIdAsync(id, null);
        }
        
        /// <remarks/>
        public void RemoveClientbyIdAsync(int id, object userState) {
            if ((this.RemoveClientbyIdOperationCompleted == null)) {
                this.RemoveClientbyIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveClientbyIdOperationCompleted);
            }
            this.InvokeAsync("RemoveClientbyId", new object[] {
                        id}, this.RemoveClientbyIdOperationCompleted, userState);
        }
        
        private void OnRemoveClientbyIdOperationCompleted(object arg) {
            if ((this.RemoveClientbyIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveClientbyIdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RemoveLoginbyId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveLoginbyId(int id) {
            this.Invoke("RemoveLoginbyId", new object[] {
                        id});
        }
        
        /// <remarks/>
        public void RemoveLoginbyIdAsync(int id) {
            this.RemoveLoginbyIdAsync(id, null);
        }
        
        /// <remarks/>
        public void RemoveLoginbyIdAsync(int id, object userState) {
            if ((this.RemoveLoginbyIdOperationCompleted == null)) {
                this.RemoveLoginbyIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveLoginbyIdOperationCompleted);
            }
            this.InvokeAsync("RemoveLoginbyId", new object[] {
                        id}, this.RemoveLoginbyIdOperationCompleted, userState);
        }
        
        private void OnRemoveLoginbyIdOperationCompleted(object arg) {
            if ((this.RemoveLoginbyIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveLoginbyIdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddLogin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddLogin(string email, string password, string type, int userId) {
            this.Invoke("AddLogin", new object[] {
                        email,
                        password,
                        type,
                        userId});
        }
        
        /// <remarks/>
        public void AddLoginAsync(string email, string password, string type, int userId) {
            this.AddLoginAsync(email, password, type, userId, null);
        }
        
        /// <remarks/>
        public void AddLoginAsync(string email, string password, string type, int userId, object userState) {
            if ((this.AddLoginOperationCompleted == null)) {
                this.AddLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddLoginOperationCompleted);
            }
            this.InvokeAsync("AddLogin", new object[] {
                        email,
                        password,
                        type,
                        userId}, this.AddLoginOperationCompleted, userState);
        }
        
        private void OnAddLoginOperationCompleted(object arg) {
            if ((this.AddLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddLoginCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReservationExists", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ReservationExists(int clientId, int recepcionistId, int arrivalDate, int exitDate, int peopleQuatenty, int roomId) {
            object[] results = this.Invoke("ReservationExists", new object[] {
                        clientId,
                        recepcionistId,
                        arrivalDate,
                        exitDate,
                        peopleQuatenty,
                        roomId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ReservationExistsAsync(int clientId, int recepcionistId, int arrivalDate, int exitDate, int peopleQuatenty, int roomId) {
            this.ReservationExistsAsync(clientId, recepcionistId, arrivalDate, exitDate, peopleQuatenty, roomId, null);
        }
        
        /// <remarks/>
        public void ReservationExistsAsync(int clientId, int recepcionistId, int arrivalDate, int exitDate, int peopleQuatenty, int roomId, object userState) {
            if ((this.ReservationExistsOperationCompleted == null)) {
                this.ReservationExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReservationExistsOperationCompleted);
            }
            this.InvokeAsync("ReservationExists", new object[] {
                        clientId,
                        recepcionistId,
                        arrivalDate,
                        exitDate,
                        peopleQuatenty,
                        roomId}, this.ReservationExistsOperationCompleted, userState);
        }
        
        private void OnReservationExistsOperationCompleted(object arg) {
            if ((this.ReservationExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReservationExistsCompleted(this, new ReservationExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddReservation", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddReservation(int clientId, int recepcionistId, int arrivalDate, int exitDate, int peopleQuatenty, int roomId) {
            this.Invoke("AddReservation", new object[] {
                        clientId,
                        recepcionistId,
                        arrivalDate,
                        exitDate,
                        peopleQuatenty,
                        roomId});
        }
        
        /// <remarks/>
        public void AddReservationAsync(int clientId, int recepcionistId, int arrivalDate, int exitDate, int peopleQuatenty, int roomId) {
            this.AddReservationAsync(clientId, recepcionistId, arrivalDate, exitDate, peopleQuatenty, roomId, null);
        }
        
        /// <remarks/>
        public void AddReservationAsync(int clientId, int recepcionistId, int arrivalDate, int exitDate, int peopleQuatenty, int roomId, object userState) {
            if ((this.AddReservationOperationCompleted == null)) {
                this.AddReservationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddReservationOperationCompleted);
            }
            this.InvokeAsync("AddReservation", new object[] {
                        clientId,
                        recepcionistId,
                        arrivalDate,
                        exitDate,
                        peopleQuatenty,
                        roomId}, this.AddReservationOperationCompleted, userState);
        }
        
        private void OnAddReservationOperationCompleted(object arg) {
            if ((this.AddReservationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddReservationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllClients", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetAllClients() {
            object[] results = this.Invoke("GetAllClients", new object[0]);
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllClientsAsync() {
            this.GetAllClientsAsync(null);
        }
        
        /// <remarks/>
        public void GetAllClientsAsync(object userState) {
            if ((this.GetAllClientsOperationCompleted == null)) {
                this.GetAllClientsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllClientsOperationCompleted);
            }
            this.InvokeAsync("GetAllClients", new object[0], this.GetAllClientsOperationCompleted, userState);
        }
        
        private void OnGetAllClientsOperationCompleted(object arg) {
            if ((this.GetAllClientsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllClientsCompleted(this, new GetAllClientsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLoginByClientId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetLoginByClientId(int id) {
            object[] results = this.Invoke("GetLoginByClientId", new object[] {
                        id});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetLoginByClientIdAsync(int id) {
            this.GetLoginByClientIdAsync(id, null);
        }
        
        /// <remarks/>
        public void GetLoginByClientIdAsync(int id, object userState) {
            if ((this.GetLoginByClientIdOperationCompleted == null)) {
                this.GetLoginByClientIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLoginByClientIdOperationCompleted);
            }
            this.InvokeAsync("GetLoginByClientId", new object[] {
                        id}, this.GetLoginByClientIdOperationCompleted, userState);
        }
        
        private void OnGetLoginByClientIdOperationCompleted(object arg) {
            if ((this.GetLoginByClientIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLoginByClientIdCompleted(this, new GetLoginByClientIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLoginByReceptionistId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetLoginByReceptionistId(int id) {
            object[] results = this.Invoke("GetLoginByReceptionistId", new object[] {
                        id});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetLoginByReceptionistIdAsync(int id) {
            this.GetLoginByReceptionistIdAsync(id, null);
        }
        
        /// <remarks/>
        public void GetLoginByReceptionistIdAsync(int id, object userState) {
            if ((this.GetLoginByReceptionistIdOperationCompleted == null)) {
                this.GetLoginByReceptionistIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLoginByReceptionistIdOperationCompleted);
            }
            this.InvokeAsync("GetLoginByReceptionistId", new object[] {
                        id}, this.GetLoginByReceptionistIdOperationCompleted, userState);
        }
        
        private void OnGetLoginByReceptionistIdOperationCompleted(object arg) {
            if ((this.GetLoginByReceptionistIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLoginByReceptionistIdCompleted(this, new GetLoginByReceptionistIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetClientById", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetClientById(int id) {
            object[] results = this.Invoke("GetClientById", new object[] {
                        id});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetClientByIdAsync(int id) {
            this.GetClientByIdAsync(id, null);
        }
        
        /// <remarks/>
        public void GetClientByIdAsync(int id, object userState) {
            if ((this.GetClientByIdOperationCompleted == null)) {
                this.GetClientByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetClientByIdOperationCompleted);
            }
            this.InvokeAsync("GetClientById", new object[] {
                        id}, this.GetClientByIdOperationCompleted, userState);
        }
        
        private void OnGetClientByIdOperationCompleted(object arg) {
            if ((this.GetClientByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetClientByIdCompleted(this, new GetClientByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRoomById", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetRoomById(int id) {
            object[] results = this.Invoke("GetRoomById", new object[] {
                        id});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetRoomByIdAsync(int id) {
            this.GetRoomByIdAsync(id, null);
        }
        
        /// <remarks/>
        public void GetRoomByIdAsync(int id, object userState) {
            if ((this.GetRoomByIdOperationCompleted == null)) {
                this.GetRoomByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRoomByIdOperationCompleted);
            }
            this.InvokeAsync("GetRoomById", new object[] {
                        id}, this.GetRoomByIdOperationCompleted, userState);
        }
        
        private void OnGetRoomByIdOperationCompleted(object arg) {
            if ((this.GetRoomByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRoomByIdCompleted(this, new GetRoomByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetReservationByClientId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetReservationByClientId(int Cid) {
            object[] results = this.Invoke("GetReservationByClientId", new object[] {
                        Cid});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetReservationByClientIdAsync(int Cid) {
            this.GetReservationByClientIdAsync(Cid, null);
        }
        
        /// <remarks/>
        public void GetReservationByClientIdAsync(int Cid, object userState) {
            if ((this.GetReservationByClientIdOperationCompleted == null)) {
                this.GetReservationByClientIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReservationByClientIdOperationCompleted);
            }
            this.InvokeAsync("GetReservationByClientId", new object[] {
                        Cid}, this.GetReservationByClientIdOperationCompleted, userState);
        }
        
        private void OnGetReservationByClientIdOperationCompleted(object arg) {
            if ((this.GetReservationByClientIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReservationByClientIdCompleted(this, new GetReservationByClientIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetReservationByReceptionistId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetReservationByReceptionistId(int Rid) {
            object[] results = this.Invoke("GetReservationByReceptionistId", new object[] {
                        Rid});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetReservationByReceptionistIdAsync(int Rid) {
            this.GetReservationByReceptionistIdAsync(Rid, null);
        }
        
        /// <remarks/>
        public void GetReservationByReceptionistIdAsync(int Rid, object userState) {
            if ((this.GetReservationByReceptionistIdOperationCompleted == null)) {
                this.GetReservationByReceptionistIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReservationByReceptionistIdOperationCompleted);
            }
            this.InvokeAsync("GetReservationByReceptionistId", new object[] {
                        Rid}, this.GetReservationByReceptionistIdOperationCompleted, userState);
        }
        
        private void OnGetReservationByReceptionistIdOperationCompleted(object arg) {
            if ((this.GetReservationByReceptionistIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReservationByReceptionistIdCompleted(this, new GetReservationByReceptionistIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetClientByReceptionistId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetClientByReceptionistId(int Rid) {
            object[] results = this.Invoke("GetClientByReceptionistId", new object[] {
                        Rid});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetClientByReceptionistIdAsync(int Rid) {
            this.GetClientByReceptionistIdAsync(Rid, null);
        }
        
        /// <remarks/>
        public void GetClientByReceptionistIdAsync(int Rid, object userState) {
            if ((this.GetClientByReceptionistIdOperationCompleted == null)) {
                this.GetClientByReceptionistIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetClientByReceptionistIdOperationCompleted);
            }
            this.InvokeAsync("GetClientByReceptionistId", new object[] {
                        Rid}, this.GetClientByReceptionistIdOperationCompleted, userState);
        }
        
        private void OnGetClientByReceptionistIdOperationCompleted(object arg) {
            if ((this.GetClientByReceptionistIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetClientByReceptionistIdCompleted(this, new GetClientByReceptionistIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRecepcionistById", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetRecepcionistById(int id) {
            object[] results = this.Invoke("GetRecepcionistById", new object[] {
                        id});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetRecepcionistByIdAsync(int id) {
            this.GetRecepcionistByIdAsync(id, null);
        }
        
        /// <remarks/>
        public void GetRecepcionistByIdAsync(int id, object userState) {
            if ((this.GetRecepcionistByIdOperationCompleted == null)) {
                this.GetRecepcionistByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRecepcionistByIdOperationCompleted);
            }
            this.InvokeAsync("GetRecepcionistById", new object[] {
                        id}, this.GetRecepcionistByIdOperationCompleted, userState);
        }
        
        private void OnGetRecepcionistByIdOperationCompleted(object arg) {
            if ((this.GetRecepcionistByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRecepcionistByIdCompleted(this, new GetRecepcionistByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllReservations", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetAllReservations() {
            object[] results = this.Invoke("GetAllReservations", new object[0]);
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllReservationsAsync() {
            this.GetAllReservationsAsync(null);
        }
        
        /// <remarks/>
        public void GetAllReservationsAsync(object userState) {
            if ((this.GetAllReservationsOperationCompleted == null)) {
                this.GetAllReservationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllReservationsOperationCompleted);
            }
            this.InvokeAsync("GetAllReservations", new object[0], this.GetAllReservationsOperationCompleted, userState);
        }
        
        private void OnGetAllReservationsOperationCompleted(object arg) {
            if ((this.GetAllReservationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllReservationsCompleted(this, new GetAllReservationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllReceptionists", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetAllReceptionists() {
            object[] results = this.Invoke("GetAllReceptionists", new object[0]);
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllReceptionistsAsync() {
            this.GetAllReceptionistsAsync(null);
        }
        
        /// <remarks/>
        public void GetAllReceptionistsAsync(object userState) {
            if ((this.GetAllReceptionistsOperationCompleted == null)) {
                this.GetAllReceptionistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllReceptionistsOperationCompleted);
            }
            this.InvokeAsync("GetAllReceptionists", new object[0], this.GetAllReceptionistsOperationCompleted, userState);
        }
        
        private void OnGetAllReceptionistsOperationCompleted(object arg) {
            if ((this.GetAllReceptionistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllReceptionistsCompleted(this, new GetAllReceptionistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllRoom", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetAllRoom() {
            object[] results = this.Invoke("GetAllRoom", new object[0]);
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllRoomAsync() {
            this.GetAllRoomAsync(null);
        }
        
        /// <remarks/>
        public void GetAllRoomAsync(object userState) {
            if ((this.GetAllRoomOperationCompleted == null)) {
                this.GetAllRoomOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllRoomOperationCompleted);
            }
            this.InvokeAsync("GetAllRoom", new object[0], this.GetAllRoomOperationCompleted, userState);
        }
        
        private void OnGetAllRoomOperationCompleted(object arg) {
            if ((this.GetAllRoomCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllRoomCompleted(this, new GetAllRoomCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllAvailableRoom", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetAllAvailableRoom() {
            object[] results = this.Invoke("GetAllAvailableRoom", new object[0]);
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllAvailableRoomAsync() {
            this.GetAllAvailableRoomAsync(null);
        }
        
        /// <remarks/>
        public void GetAllAvailableRoomAsync(object userState) {
            if ((this.GetAllAvailableRoomOperationCompleted == null)) {
                this.GetAllAvailableRoomOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllAvailableRoomOperationCompleted);
            }
            this.InvokeAsync("GetAllAvailableRoom", new object[0], this.GetAllAvailableRoomOperationCompleted, userState);
        }
        
        private void OnGetAllAvailableRoomOperationCompleted(object arg) {
            if ((this.GetAllAvailableRoomCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllAvailableRoomCompleted(this, new GetAllAvailableRoomCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllNonAvailableRoom", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetAllNonAvailableRoom() {
            object[] results = this.Invoke("GetAllNonAvailableRoom", new object[0]);
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllNonAvailableRoomAsync() {
            this.GetAllNonAvailableRoomAsync(null);
        }
        
        /// <remarks/>
        public void GetAllNonAvailableRoomAsync(object userState) {
            if ((this.GetAllNonAvailableRoomOperationCompleted == null)) {
                this.GetAllNonAvailableRoomOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllNonAvailableRoomOperationCompleted);
            }
            this.InvokeAsync("GetAllNonAvailableRoom", new object[0], this.GetAllNonAvailableRoomOperationCompleted, userState);
        }
        
        private void OnGetAllNonAvailableRoomOperationCompleted(object arg) {
            if ((this.GetAllNonAvailableRoomCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllNonAvailableRoomCompleted(this, new GetAllNonAvailableRoomCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateClient", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateClient(int id, string name, string lastname, int cardnumber, int phone, string password, string email) {
            this.Invoke("UpdateClient", new object[] {
                        id,
                        name,
                        lastname,
                        cardnumber,
                        phone,
                        password,
                        email});
        }
        
        /// <remarks/>
        public void UpdateClientAsync(int id, string name, string lastname, int cardnumber, int phone, string password, string email) {
            this.UpdateClientAsync(id, name, lastname, cardnumber, phone, password, email, null);
        }
        
        /// <remarks/>
        public void UpdateClientAsync(int id, string name, string lastname, int cardnumber, int phone, string password, string email, object userState) {
            if ((this.UpdateClientOperationCompleted == null)) {
                this.UpdateClientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateClientOperationCompleted);
            }
            this.InvokeAsync("UpdateClient", new object[] {
                        id,
                        name,
                        lastname,
                        cardnumber,
                        phone,
                        password,
                        email}, this.UpdateClientOperationCompleted, userState);
        }
        
        private void OnUpdateClientOperationCompleted(object arg) {
            if ((this.UpdateClientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateClientCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateReceptionist", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateReceptionist(int id, string name, string lastname, string password) {
            this.Invoke("UpdateReceptionist", new object[] {
                        id,
                        name,
                        lastname,
                        password});
        }
        
        /// <remarks/>
        public void UpdateReceptionistAsync(int id, string name, string lastname, string password) {
            this.UpdateReceptionistAsync(id, name, lastname, password, null);
        }
        
        /// <remarks/>
        public void UpdateReceptionistAsync(int id, string name, string lastname, string password, object userState) {
            if ((this.UpdateReceptionistOperationCompleted == null)) {
                this.UpdateReceptionistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateReceptionistOperationCompleted);
            }
            this.InvokeAsync("UpdateReceptionist", new object[] {
                        id,
                        name,
                        lastname,
                        password}, this.UpdateReceptionistOperationCompleted, userState);
        }
        
        private void OnUpdateReceptionistOperationCompleted(object arg) {
            if ((this.UpdateReceptionistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateReceptionistCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateLogin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateLogin(int id, string email, string password) {
            this.Invoke("UpdateLogin", new object[] {
                        id,
                        email,
                        password});
        }
        
        /// <remarks/>
        public void UpdateLoginAsync(int id, string email, string password) {
            this.UpdateLoginAsync(id, email, password, null);
        }
        
        /// <remarks/>
        public void UpdateLoginAsync(int id, string email, string password, object userState) {
            if ((this.UpdateLoginOperationCompleted == null)) {
                this.UpdateLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateLoginOperationCompleted);
            }
            this.InvokeAsync("UpdateLogin", new object[] {
                        id,
                        email,
                        password}, this.UpdateLoginOperationCompleted, userState);
        }
        
        private void OnUpdateLoginOperationCompleted(object arg) {
            if ((this.UpdateLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateLoginCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChangePasswordLogin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ChangePasswordLogin(int id, string password) {
            this.Invoke("ChangePasswordLogin", new object[] {
                        id,
                        password});
        }
        
        /// <remarks/>
        public void ChangePasswordLoginAsync(int id, string password) {
            this.ChangePasswordLoginAsync(id, password, null);
        }
        
        /// <remarks/>
        public void ChangePasswordLoginAsync(int id, string password, object userState) {
            if ((this.ChangePasswordLoginOperationCompleted == null)) {
                this.ChangePasswordLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePasswordLoginOperationCompleted);
            }
            this.InvokeAsync("ChangePasswordLogin", new object[] {
                        id,
                        password}, this.ChangePasswordLoginOperationCompleted, userState);
        }
        
        private void OnChangePasswordLoginOperationCompleted(object arg) {
            if ((this.ChangePasswordLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangePasswordLoginCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChangePasswordClient", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ChangePasswordClient(int id, string password) {
            this.Invoke("ChangePasswordClient", new object[] {
                        id,
                        password});
        }
        
        /// <remarks/>
        public void ChangePasswordClientAsync(int id, string password) {
            this.ChangePasswordClientAsync(id, password, null);
        }
        
        /// <remarks/>
        public void ChangePasswordClientAsync(int id, string password, object userState) {
            if ((this.ChangePasswordClientOperationCompleted == null)) {
                this.ChangePasswordClientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePasswordClientOperationCompleted);
            }
            this.InvokeAsync("ChangePasswordClient", new object[] {
                        id,
                        password}, this.ChangePasswordClientOperationCompleted, userState);
        }
        
        private void OnChangePasswordClientOperationCompleted(object arg) {
            if ((this.ChangePasswordClientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangePasswordClientCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChangePasswordReceptionist", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ChangePasswordReceptionist(int id, string password) {
            this.Invoke("ChangePasswordReceptionist", new object[] {
                        id,
                        password});
        }
        
        /// <remarks/>
        public void ChangePasswordReceptionistAsync(int id, string password) {
            this.ChangePasswordReceptionistAsync(id, password, null);
        }
        
        /// <remarks/>
        public void ChangePasswordReceptionistAsync(int id, string password, object userState) {
            if ((this.ChangePasswordReceptionistOperationCompleted == null)) {
                this.ChangePasswordReceptionistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePasswordReceptionistOperationCompleted);
            }
            this.InvokeAsync("ChangePasswordReceptionist", new object[] {
                        id,
                        password}, this.ChangePasswordReceptionistOperationCompleted, userState);
        }
        
        private void OnChangePasswordReceptionistOperationCompleted(object arg) {
            if ((this.ChangePasswordReceptionistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangePasswordReceptionistCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChangeAvailableRoom", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ChangeAvailableRoom(int id, string available) {
            this.Invoke("ChangeAvailableRoom", new object[] {
                        id,
                        available});
        }
        
        /// <remarks/>
        public void ChangeAvailableRoomAsync(int id, string available) {
            this.ChangeAvailableRoomAsync(id, available, null);
        }
        
        /// <remarks/>
        public void ChangeAvailableRoomAsync(int id, string available, object userState) {
            if ((this.ChangeAvailableRoomOperationCompleted == null)) {
                this.ChangeAvailableRoomOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeAvailableRoomOperationCompleted);
            }
            this.InvokeAsync("ChangeAvailableRoom", new object[] {
                        id,
                        available}, this.ChangeAvailableRoomOperationCompleted, userState);
        }
        
        private void OnChangeAvailableRoomOperationCompleted(object arg) {
            if ((this.ChangeAvailableRoomCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeAvailableRoomCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void LoginCompletedEventHandler(object sender, LoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ClientExistsCompletedEventHandler(object sender, ClientExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ClientExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ClientExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetIdClientExistsCompletedEventHandler(object sender, GetIdClientExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIdClientExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIdClientExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void AddClientCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void AddRoomCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void RemoveClientbyIdCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void RemoveLoginbyIdCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void AddLoginCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ReservationExistsCompletedEventHandler(object sender, ReservationExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReservationExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReservationExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void AddReservationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetAllClientsCompletedEventHandler(object sender, GetAllClientsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllClientsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllClientsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetLoginByClientIdCompletedEventHandler(object sender, GetLoginByClientIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLoginByClientIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLoginByClientIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetLoginByReceptionistIdCompletedEventHandler(object sender, GetLoginByReceptionistIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLoginByReceptionistIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLoginByReceptionistIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetClientByIdCompletedEventHandler(object sender, GetClientByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetClientByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetClientByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetRoomByIdCompletedEventHandler(object sender, GetRoomByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRoomByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRoomByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetReservationByClientIdCompletedEventHandler(object sender, GetReservationByClientIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReservationByClientIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReservationByClientIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetReservationByReceptionistIdCompletedEventHandler(object sender, GetReservationByReceptionistIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReservationByReceptionistIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReservationByReceptionistIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetClientByReceptionistIdCompletedEventHandler(object sender, GetClientByReceptionistIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetClientByReceptionistIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetClientByReceptionistIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetRecepcionistByIdCompletedEventHandler(object sender, GetRecepcionistByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRecepcionistByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRecepcionistByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetAllReservationsCompletedEventHandler(object sender, GetAllReservationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllReservationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllReservationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetAllReceptionistsCompletedEventHandler(object sender, GetAllReceptionistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllReceptionistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllReceptionistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetAllRoomCompletedEventHandler(object sender, GetAllRoomCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllRoomCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllRoomCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetAllAvailableRoomCompletedEventHandler(object sender, GetAllAvailableRoomCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllAvailableRoomCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllAvailableRoomCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetAllNonAvailableRoomCompletedEventHandler(object sender, GetAllNonAvailableRoomCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllNonAvailableRoomCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllNonAvailableRoomCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UpdateClientCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UpdateReceptionistCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UpdateLoginCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ChangePasswordLoginCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ChangePasswordClientCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ChangePasswordReceptionistCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ChangeAvailableRoomCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591